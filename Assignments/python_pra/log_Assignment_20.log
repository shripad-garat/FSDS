2022-07-17 00:05:02,801 : INFO : Question 1: Create a function that takes a list of strings and integers, and filters out the list so that it returns a list of integers only.
2022-07-17 00:05:02,801 : INFO : Start executing Question 1
2022-07-17 00:06:50,358 : DEBUG : pickle loaded: C:\Users\HP\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2022-07-17 00:06:50,389 : DEBUG : pickle loaded: C:\Users\HP\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2022-07-17 00:06:51,155 : DEBUG : diff parser start
2022-07-17 00:06:51,155 : DEBUG : line_lengths old: 5; new: 5
2022-07-17 00:06:51,156 : DEBUG : -> code[equal] old[1:4] new[1:4]
2022-07-17 00:06:51,156 : DEBUG : copy old[1:4] new[1:2]
2022-07-17 00:06:51,164 : DEBUG : parse_part from 3 to 5 (to 4 in part parser)
2022-07-17 00:06:51,164 : DEBUG : -> code[replace] old[5:5] new[5:5]
2022-07-17 00:06:51,164 : DEBUG : diff parser end
2022-07-17 00:06:54,620 : DEBUG : diff parser start
2022-07-17 00:06:54,621 : DEBUG : line_lengths old: 5; new: 5
2022-07-17 00:06:54,621 : DEBUG : -> code[equal] old[1:4] new[1:4]
2022-07-17 00:06:54,621 : DEBUG : copy old[1:4] new[1:2]
2022-07-17 00:06:54,622 : DEBUG : parse_part from 3 to 5 (to 4 in part parser)
2022-07-17 00:06:54,622 : DEBUG : -> code[replace] old[5:5] new[5:5]
2022-07-17 00:06:54,622 : DEBUG : diff parser end
2022-07-17 00:07:33,635 : DEBUG : diff parser start
2022-07-17 00:07:33,635 : DEBUG : line_lengths old: 5; new: 1
2022-07-17 00:07:33,635 : DEBUG : -> code[replace] old[1:5] new[1:1]
2022-07-17 00:07:33,636 : DEBUG : parse_part from 1 to 1 (to 0 in part parser)
2022-07-17 00:07:33,636 : DEBUG : diff parser end
2022-07-17 00:09:10,997 : INFO : Question 2: Given a list of numbers, create a function which returns the list but with each elements index in the list added to itself. This means you add 0 to the number at index 0, add 1 to the number at index 1, etc...
2022-07-17 00:09:10,998 : INFO : Start executing Question 2
2022-07-17 00:10:52,620 : DEBUG : diff parser start
2022-07-17 00:10:52,620 : DEBUG : line_lengths old: 1; new: 5
2022-07-17 00:10:52,620 : DEBUG : -> code[replace] old[1:1] new[1:5]
2022-07-17 00:10:52,621 : DEBUG : parse_part from 1 to 5 (to 4 in part parser)
2022-07-17 00:10:52,621 : DEBUG : diff parser end
2022-07-17 00:10:56,123 : DEBUG : diff parser start
2022-07-17 00:10:56,123 : DEBUG : line_lengths old: 5; new: 5
2022-07-17 00:10:56,124 : DEBUG : -> code[equal] old[1:4] new[1:4]
2022-07-17 00:10:56,124 : DEBUG : copy old[1:4] new[1:2]
2022-07-17 00:10:56,125 : DEBUG : parse_part from 3 to 5 (to 4 in part parser)
2022-07-17 00:10:56,125 : DEBUG : -> code[replace] old[5:5] new[5:5]
2022-07-17 00:10:56,125 : DEBUG : diff parser end
2022-07-17 00:11:39,277 : INFO : Error Occured: 'list' object cannot be interpreted as an integer
2022-07-17 00:13:40,773 : INFO : Question 3: Create a function that takes the height and radius of a cone as arguments and returns the volume of the cone rounded to the nearest hundredth. See the resources tab for the formula.
2022-07-17 00:13:40,774 : INFO : Start executing Question 3
2022-07-17 00:17:24,044 : DEBUG : diff parser start
2022-07-17 00:17:24,044 : DEBUG : line_lengths old: 5; new: 6
2022-07-17 00:17:24,044 : DEBUG : -> code[replace] old[1:2] new[1:2]
2022-07-17 00:17:24,046 : DEBUG : parse_part from 1 to 6 (to 5 in part parser)
2022-07-17 00:17:24,046 : DEBUG : -> code[equal] old[3:3] new[3:3]
2022-07-17 00:17:24,046 : DEBUG : -> code[replace] old[4:5] new[4:6]
2022-07-17 00:17:24,046 : DEBUG : diff parser end
2022-07-17 00:17:26,211 : DEBUG : diff parser start
2022-07-17 00:17:26,211 : DEBUG : line_lengths old: 6; new: 6
2022-07-17 00:17:26,211 : DEBUG : -> code[equal] old[1:5] new[1:5]
2022-07-17 00:17:26,211 : DEBUG : copy old[1:5] new[1:2]
2022-07-17 00:17:26,212 : DEBUG : parse_part from 3 to 6 (to 5 in part parser)
2022-07-17 00:17:26,212 : DEBUG : -> code[replace] old[6:6] new[6:6]
2022-07-17 00:17:26,212 : DEBUG : diff parser end
2022-07-17 00:19:57,501 : INFO : Question 4: This Triangular Number Sequence is generated from a pattern of dots that form a triangle. The first 5 numbers of the sequence, or dots, are: 1, 3, 6, 10, 15 This means that the first triangle has just one dot, the second one has three dots, the third one has 6 dots and so on. Write a function that gives the number of dots with its corresponding triangle number of the sequence.
2022-07-17 00:19:57,502 : INFO : Start executing Question 3
2022-07-17 00:28:04,402 : DEBUG : diff parser start
2022-07-17 00:28:04,402 : DEBUG : line_lengths old: 6; new: 5
2022-07-17 00:28:04,402 : DEBUG : -> code[replace] old[1:2] new[1:2]
2022-07-17 00:28:04,402 : DEBUG : parse_part from 1 to 5 (to 4 in part parser)
2022-07-17 00:28:04,402 : DEBUG : -> code[equal] old[3:3] new[3:3]
2022-07-17 00:28:04,402 : DEBUG : -> code[replace] old[4:6] new[4:5]
2022-07-17 00:28:04,402 : DEBUG : diff parser end
2022-07-17 00:28:08,115 : DEBUG : diff parser start
2022-07-17 00:28:08,115 : DEBUG : line_lengths old: 5; new: 5
2022-07-17 00:28:08,115 : DEBUG : -> code[equal] old[1:4] new[1:4]
2022-07-17 00:28:08,115 : DEBUG : copy old[1:4] new[1:2]
2022-07-17 00:28:08,115 : DEBUG : parse_part from 3 to 5 (to 4 in part parser)
2022-07-17 00:28:08,115 : DEBUG : -> code[replace] old[5:5] new[5:5]
2022-07-17 00:28:08,115 : DEBUG : diff parser end
2022-07-17 00:30:16,182 : INFO : Question 4: Create a function that takes a list of numbers between 1 and 10 (excluding one number) and returns the missing number.
2022-07-17 00:30:16,182 : INFO : Start executing Question 4
2022-07-17 00:34:29,047 : DEBUG : diff parser start
2022-07-17 00:34:29,052 : DEBUG : line_lengths old: 5; new: 5
2022-07-17 00:34:29,052 : DEBUG : -> code[replace] old[1:2] new[1:2]
2022-07-17 00:34:29,052 : DEBUG : parse_part from 1 to 5 (to 4 in part parser)
2022-07-17 00:34:29,052 : DEBUG : -> code[equal] old[3:3] new[3:3]
2022-07-17 00:34:29,052 : DEBUG : -> code[replace] old[4:5] new[4:5]
2022-07-17 00:34:29,052 : DEBUG : diff parser end
2022-07-17 00:34:31,483 : DEBUG : diff parser start
2022-07-17 00:34:31,483 : DEBUG : line_lengths old: 5; new: 5
2022-07-17 00:34:31,483 : DEBUG : -> code[equal] old[1:4] new[1:4]
2022-07-17 00:34:31,483 : DEBUG : copy old[1:4] new[1:2]
2022-07-17 00:34:31,483 : DEBUG : parse_part from 3 to 5 (to 4 in part parser)
2022-07-17 00:34:31,483 : DEBUG : -> code[replace] old[5:5] new[5:5]
2022-07-17 00:34:31,483 : DEBUG : diff parser end
2022-07-17 00:34:46,383 : DEBUG : diff parser start
2022-07-17 00:34:46,383 : DEBUG : line_lengths old: 5; new: 7
2022-07-17 00:34:46,383 : DEBUG : -> code[equal] old[1:4] new[1:4]
2022-07-17 00:34:46,383 : DEBUG : copy old[1:4] new[1:2]
2022-07-17 00:34:46,393 : DEBUG : parse_part from 3 to 7 (to 6 in part parser)
2022-07-17 00:34:46,393 : DEBUG : -> code[replace] old[5:5] new[5:7]
2022-07-17 00:34:46,393 : DEBUG : diff parser end
2022-07-17 00:37:04,281 : INFO : Question 1: Create a function that takes a list of strings and integers, and filters out the list so that it returns a list of integers only.
2022-07-17 00:37:04,281 : INFO : Start executing Question 1
2022-07-17 00:37:04,365 : INFO : Question 2: Given a list of numbers, create a function which returns the list but with each elements index in the list added to itself. This means you add 0 to the number at index 0, add 1 to the number at index 1, etc...
2022-07-17 00:37:04,372 : INFO : Start executing Question 2
2022-07-17 00:37:04,411 : INFO : Question 3: Create a function that takes the height and radius of a cone as arguments and returns the volume of the cone rounded to the nearest hundredth. See the resources tab for the formula.
2022-07-17 00:37:04,411 : INFO : Start executing Question 3
2022-07-17 00:37:04,467 : INFO : Question 4: This Triangular Number Sequence is generated from a pattern of dots that form a triangle. The first 5 numbers of the sequence, or dots, are: 1, 3, 6, 10, 15 This means that the first triangle has just one dot, the second one has three dots, the third one has 6 dots and so on. Write a function that gives the number of dots with its corresponding triangle number of the sequence.
2022-07-17 00:37:04,467 : INFO : Start executing Question 3
2022-07-17 00:37:04,512 : INFO : Question 4: Create a function that takes a list of numbers between 1 and 10 (excluding one number) and returns the missing number.
2022-07-17 00:37:04,512 : INFO : Start executing Question 4
2022-07-17 00:37:31,219 : INFO : Question 1: Write a function that takes a list and a number as arguments. Add the number to the end of the list, then remove the first element of the list. The function should then return the updated list.
2022-07-17 00:37:31,219 : INFO : Start executing Question 1
2022-07-17 00:41:06,516 : DEBUG : pickle loaded: C:\Users\HP\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\2and3\builtins.pyi
2022-07-17 00:41:06,590 : DEBUG : pickle loaded: C:\Users\HP\anaconda3\lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
2022-07-17 00:41:10,037 : DEBUG : diff parser start
2022-07-17 00:41:10,037 : DEBUG : line_lengths old: 7; new: 7
2022-07-17 00:41:10,037 : DEBUG : -> code[equal] old[1:6] new[1:6]
2022-07-17 00:41:10,037 : DEBUG : copy old[1:6] new[1:2]
2022-07-17 00:41:10,037 : DEBUG : parse_part from 3 to 7 (to 6 in part parser)
2022-07-17 00:41:10,037 : DEBUG : -> code[replace] old[7:7] new[7:7]
2022-07-17 00:41:10,037 : DEBUG : diff parser end
2022-07-17 00:41:19,201 : DEBUG : diff parser start
2022-07-17 00:41:19,201 : DEBUG : line_lengths old: 7; new: 8
2022-07-17 00:41:19,201 : DEBUG : -> code[equal] old[1:6] new[1:6]
2022-07-17 00:41:19,201 : DEBUG : copy old[1:6] new[1:2]
2022-07-17 00:41:19,201 : DEBUG : parse_part from 3 to 8 (to 7 in part parser)
2022-07-17 00:41:19,201 : DEBUG : -> code[replace] old[7:7] new[7:8]
2022-07-17 00:41:19,201 : DEBUG : diff parser end
2022-07-17 00:41:23,311 : DEBUG : diff parser start
2022-07-17 00:41:23,311 : DEBUG : line_lengths old: 8; new: 8
2022-07-17 00:41:23,311 : DEBUG : -> code[equal] old[1:7] new[1:7]
2022-07-17 00:41:23,311 : DEBUG : copy old[1:7] new[1:2]
2022-07-17 00:41:23,319 : DEBUG : parse_part from 3 to 8 (to 7 in part parser)
2022-07-17 00:41:23,319 : DEBUG : -> code[replace] old[8:8] new[8:8]
2022-07-17 00:41:23,319 : DEBUG : diff parser end
2022-07-17 00:42:44,253 : DEBUG : diff parser start
2022-07-17 00:42:44,253 : DEBUG : line_lengths old: 8; new: 7
2022-07-17 00:42:44,253 : DEBUG : -> code[equal] old[1:5] new[1:5]
2022-07-17 00:42:44,253 : DEBUG : copy old[1:7] new[1:2]
2022-07-17 00:42:44,253 : DEBUG : parse_part from 3 to 7 (to 6 in part parser)
2022-07-17 00:42:44,253 : DEBUG : -> code[replace] old[6:8] new[6:7]
2022-07-17 00:42:44,253 : DEBUG : diff parser end
2022-07-17 00:42:46,502 : DEBUG : diff parser start
2022-07-17 00:42:46,502 : DEBUG : line_lengths old: 7; new: 7
2022-07-17 00:42:46,502 : DEBUG : -> code[equal] old[1:6] new[1:6]
2022-07-17 00:42:46,502 : DEBUG : copy old[1:6] new[1:2]
2022-07-17 00:42:46,511 : DEBUG : parse_part from 3 to 7 (to 6 in part parser)
2022-07-17 00:42:46,511 : DEBUG : -> code[replace] old[7:7] new[7:7]
2022-07-17 00:42:46,511 : DEBUG : diff parser end
2022-07-17 00:42:55,231 : DEBUG : diff parser start
2022-07-17 00:42:55,231 : DEBUG : line_lengths old: 7; new: 7
2022-07-17 00:42:55,231 : DEBUG : -> code[equal] old[1:6] new[1:6]
2022-07-17 00:42:55,231 : DEBUG : copy old[1:6] new[1:2]
2022-07-17 00:42:55,231 : DEBUG : parse_part from 3 to 7 (to 6 in part parser)
2022-07-17 00:42:55,231 : DEBUG : -> code[replace] old[7:7] new[7:7]
2022-07-17 00:42:55,231 : DEBUG : diff parser end
2022-07-17 00:43:03,443 : INFO : Error Occured: 'int' object is not iterable
2022-07-17 00:49:47,488 : INFO : Question 2: Create the function that takes a list of dictionaries and returns the sum of peoples budgets.
2022-07-17 00:49:47,488 : INFO : Start executing Question 2
2022-07-17 00:52:11,395 : DEBUG : diff parser start
2022-07-17 00:52:11,395 : DEBUG : line_lengths old: 7; new: 5
2022-07-17 00:52:11,395 : DEBUG : -> code[replace] old[1:2] new[1:2]
2022-07-17 00:52:11,395 : DEBUG : parse_part from 1 to 5 (to 4 in part parser)
2022-07-17 00:52:11,395 : DEBUG : -> code[equal] old[3:3] new[3:3]
2022-07-17 00:52:11,395 : DEBUG : -> code[replace] old[4:7] new[4:5]
2022-07-17 00:52:11,395 : DEBUG : diff parser end
2022-07-17 00:52:14,761 : DEBUG : diff parser start
2022-07-17 00:52:14,761 : DEBUG : line_lengths old: 5; new: 5
2022-07-17 00:52:14,761 : DEBUG : -> code[equal] old[1:4] new[1:4]
2022-07-17 00:52:14,761 : DEBUG : copy old[1:4] new[1:2]
2022-07-17 00:52:14,766 : DEBUG : parse_part from 3 to 5 (to 4 in part parser)
2022-07-17 00:52:14,766 : DEBUG : -> code[replace] old[5:5] new[5:5]
2022-07-17 00:52:14,766 : DEBUG : diff parser end
2022-07-17 00:56:01,866 : INFO : Question 3: Create a function that takes a string and returns a string with its letters in alphabetical order.
2022-07-17 00:56:01,866 : INFO : Start executing Question 3
2022-07-17 00:59:20,731 : DEBUG : diff parser start
2022-07-17 00:59:20,731 : DEBUG : line_lengths old: 5; new: 5
2022-07-17 00:59:20,731 : DEBUG : -> code[replace] old[1:2] new[1:2]
2022-07-17 00:59:20,734 : DEBUG : parse_part from 1 to 5 (to 4 in part parser)
2022-07-17 00:59:20,734 : DEBUG : -> code[equal] old[3:3] new[3:3]
2022-07-17 00:59:20,734 : DEBUG : -> code[replace] old[4:4] new[4:4]
2022-07-17 00:59:20,734 : DEBUG : -> code[equal] old[5:5] new[5:5]
2022-07-17 00:59:20,734 : DEBUG : diff parser end
2022-07-17 22:20:46,632 : INFO : Question 4: Suppose that you invest 10,000 for 10 years at an interest rate of 6% compounded monthly. What will be the value of your investment at the end of the 10 year period? Create a function that accepts the principal p, the term in years t, the interest rate r, and the number of compounding periods per year n. The function returns the value at the end of term rounded to the nearest cent.### Question4 Suppose that you invest 10,000 for 10 years at an interest rate of 6% compounded monthly. What will be the value of your investment at the end of the 10 year period? Create a function that accepts the principal p, the term in years t, the interest rate r, and the number of compounding periods per year n. The function returns the value at the end of term rounded to the nearest cent.
2022-07-17 22:20:46,633 : INFO : Start executing Question 4
2022-07-17 22:29:35,609 : DEBUG : diff parser start
2022-07-17 22:29:35,611 : DEBUG : line_lengths old: 5; new: 6
2022-07-17 22:29:35,611 : DEBUG : -> code[replace] old[1:2] new[1:2]
2022-07-17 22:29:35,624 : DEBUG : parse_part from 1 to 6 (to 5 in part parser)
2022-07-17 22:29:35,624 : DEBUG : -> code[equal] old[3:3] new[3:3]
2022-07-17 22:29:35,624 : DEBUG : -> code[replace] old[4:5] new[4:6]
2022-07-17 22:29:35,625 : DEBUG : diff parser end
2022-07-17 22:29:41,372 : DEBUG : diff parser start
2022-07-17 22:29:41,372 : DEBUG : line_lengths old: 6; new: 6
2022-07-17 22:29:41,372 : DEBUG : -> code[equal] old[1:5] new[1:5]
2022-07-17 22:29:41,373 : DEBUG : copy old[1:5] new[1:2]
2022-07-17 22:29:41,373 : DEBUG : parse_part from 3 to 6 (to 5 in part parser)
2022-07-17 22:29:41,374 : DEBUG : -> code[replace] old[6:6] new[6:6]
2022-07-17 22:29:41,374 : DEBUG : diff parser end
2022-07-17 22:32:32,568 : INFO : Question 5: Write a function that takes a list of elements and returns only the integers.
2022-07-17 22:32:32,569 : INFO : Start executing Question 5
2022-07-17 22:34:15,036 : DEBUG : diff parser start
2022-07-17 22:34:15,036 : DEBUG : line_lengths old: 6; new: 5
2022-07-17 22:34:15,036 : DEBUG : -> code[replace] old[1:2] new[1:2]
2022-07-17 22:34:15,038 : DEBUG : parse_part from 1 to 5 (to 4 in part parser)
2022-07-17 22:34:15,038 : DEBUG : -> code[equal] old[3:3] new[3:3]
2022-07-17 22:34:15,038 : DEBUG : -> code[replace] old[4:6] new[4:5]
2022-07-17 22:34:15,038 : DEBUG : diff parser end
2022-07-17 22:34:17,686 : DEBUG : diff parser start
2022-07-17 22:34:17,687 : DEBUG : line_lengths old: 5; new: 5
2022-07-17 22:34:17,687 : DEBUG : -> code[equal] old[1:4] new[1:4]
2022-07-17 22:34:17,687 : DEBUG : copy old[1:4] new[1:2]
2022-07-17 22:34:17,688 : DEBUG : parse_part from 3 to 5 (to 4 in part parser)
2022-07-17 22:34:17,688 : DEBUG : -> code[replace] old[5:5] new[5:5]
2022-07-17 22:34:17,688 : DEBUG : diff parser end
